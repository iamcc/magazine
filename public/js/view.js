// Generated by CoffeeScript 1.7.1
(function() {
  var $pages, H, W, bind, curPage, h, init, initPage, lastPage, move, moveNext, movePre, moving, play, w;

  $pages = $('#pages');

  curPage = 0;

  lastPage = 0;

  moving = false;

  h = 0;

  w = 0;

  H = 504;

  W = 320;

  initPage = function(pages) {
    lastPage = pages.length - 1;
    return pages.forEach(function(page, i) {
      var $div, $wrap;
      $div = $('<div>').attr('id', "page-" + i).addClass('page').css('background-color', page.bgColor).css('position', 'relative');
      $wrap = $('<div>').addClass('wrap');
      $div.append($wrap);
      $pages.append($div);
      return page.items.forEach(function(item, j) {
        var $img, $item, ani, animates;
        $item = $('<div>');
        $wrap.append($item);
        animates = (function() {
          var _i, _len, _ref, _results;
          _ref = item.animates;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            ani = _ref[_i];
            _results.push("" + ani.name + " " + (ani.duration || 1000) + "ms " + (ani.delay || 0) + "ms both");
          }
          return _results;
        })();
        animates.push(item.repeat);
        $item.data('animates', JSON.stringify(animates)).addClass('item').css({
          position: 'absolute',
          top: "" + item.y + "%",
          left: "" + item.x + "%",
          'z-index': item.zindex,
          display: 'none'
        });
        switch (item.type) {
          case 'text':
            return $item.css({
              color: item.font.color,
              'background-color': item.font.bgColor,
              'font-size': item.font.size,
              'font-weight': item.font.style
            }).html(item.text);
          case 'image':
            $img = $('<img>').attr('src', item.src).attr('alt', item.name).attr('width', '100%');
            $item.css('width', item.w + '%');
            return $item.html($img);
        }
      });
    });
  };

  bind = function() {
    return $(document).on('touchstart', function(e) {
      return e.preventDefault();
    }).on('touchmove', function(e) {
      return e.preventDefault();
    }).swipeUp(function(e) {
      return moveNext();
    }).swipeDown(function(e) {
      return movePre();
    });
  };

  play = function(i) {
    return $("#page-" + i + " .item").each(function(j, item) {
      var $item, animates;
      $item = $(item);
      animates = $item.data('animates');
      $item.on('webkitAnimationEnd', function() {
        var animate;
        animate = animates.shift();
        $item.css('-webkit-animation', animate);
        if (animate === 'global' || animate === 'last') {
          animates = $item.data('animates');
          switch (animate) {
            case 'global':
              $item.hide();
              animate = animates.shift().replace(/^(.* .*ms) (.*ms)/, '$1 0s');
              break;
            case 'last':
              animates = animates.slice(-2);
              animate = animates.shift();
          }
          return setTimeout(function() {
            return $item.show().css('-webkit-animation', animate);
          });
        }
      });
      $item.css('-webkit-animation', animates.shift());
      return $item.show();
    });
  };

  init = function() {
    var url;
    url = location.search.replace('?json=', '');
    url = '/json/' + url;
    return $.getJSON(url, function(json) {
      var $wrap;
      initPage(json);
      bind();
      h = $(document).height();
      w = $(document).width();
      $pages.height(pages.length * h);
      $('.page').height(h);
      if (w > W) {
        $wrap = $('.wrap');
        $wrap.css('width', "" + (W / w * 100) + "%");
        $wrap.css('-webkit-transform', "scale(" + (w / W) + ") translateY(" + ((1 - W / w) / 2 * 100) + "%)");
      }
      if (h < H) {
        $wrap = $('.wrap');
        $wrap.css('-webkit-transform', "scale(" + (h / H) + ") translateY(" + ((1 - H / h) / 2 * 100) + "%)");
      }
      return play(0);
    });
  };

  move = function(n) {
    if (moving || curPage === 0 && n < 0 || curPage === lastPage && n > 0) {
      return;
    }
    moving = true;
    curPage += n;
    return $pages.css('-webkit-transform', "translate3d(0px, -" + (curPage * h) + "px, 0px)").one('webkitTransitionEnd', function() {
      $("#page-" + (curPage - n) + " .item").hide();
      play(curPage);
      return moving = false;
    });
  };

  moveNext = function() {
    return move(1);
  };

  movePre = function() {
    return move(-1);
  };

  $(function() {
    return init();
  });

}).call(this);
