// Generated by CoffeeScript 1.7.1
(function() {
  angular.module('app', ['ui.bootstrap']).directive('ccDrag', function($compile, $http, $templateCache) {
    return {
      restrict: 'A',
      scope: {
        item: '=ccDrag'
      },
      replace: true,
      link: function(scope, elem, attrs) {
        var $el, build, url;
        elem[0].draggable = true;
        elem[0].style.position = 'absolute';
        elem[0].style.top = scope.item.y + '%';
        elem[0].style.left = scope.item.x + '%';
        url = "/public/view/" + scope.item.type + "Item.html";
        $el = $(elem[0]);
        scope.item.animates.forEach(function(animate) {
          return $el.hide().velocity(animate.easing, {
            delay: animate.delay,
            duration: animate.duration
          });
        });
        build = function() {
          elem.html($templateCache.get(url));
          return $compile(elem.contents())(scope);
        };
        if (!$templateCache.get(url)) {
          $http.get(url).success(function(data) {
            $templateCache.put(url, data);
            return build();
          });
        } else {
          build();
        }
        return elem.on('dragend', function(e) {
          var height, left, maxHeight, maxWidth, top, width;
          width = elem[0].clientWidth;
          height = elem[0].clientHeight;
          maxWidth = elem[0].parentElement.clientWidth - width;
          maxHeight = elem[0].parentElement.clientHeight - height;
          top = parseInt(elem[0].style.top.replace('%', '')) || 0;
          left = parseInt(elem[0].style.left.replace('%', '')) || 0;
          top = top / 100 * maxHeight + e.offsetY - height;
          left = left / 100 * maxWidth + e.offsetX;
          if (top < 0) {
            top = 0;
          }
          if (top > maxHeight) {
            top = maxHeight;
          }
          if (left < 0) {
            left = 0;
          }
          if (left > maxWidth) {
            left = maxWidth;
          }
          elem[0].style.top = ~~((top / maxHeight) * 100) + '%';
          elem[0].style.left = ~~((left / maxWidth) * 100) + '%';
          scope.item.y = ~~((top / maxHeight) * 100);
          return scope.item.x = ~~((left / maxWidth) * 100);
        });
      }
    };
  }).controller('mainCtrl', function($scope, $modal, $window) {
    $scope.curIdx = -1;
    $scope.curPage = null;
    $scope.pages = angular.fromJson($window.sessionStorage.pages) || [];
    $scope.move = function(idx, n) {
      var page;
      page = $scope.pages.splice(idx, 1);
      return $scope.pages.splice(idx + n, 0, page[0]);
    };
    $scope.selectPage = function(idx, page) {
      $scope.curIdx = idx;
      return $scope.curPage = angular.copy(page);
    };
    $scope.newPage = function() {
      var page;
      page = {
        title: "page-" + $scope.pages.length,
        items: []
      };
      $scope.pages.push(page);
      $scope.curPage = angular.copy(page);
      return $scope.curIdx = $scope.pages.length - 1;
    };
    $scope.delPage = function(idx) {
      return $scope.pages.splice(idx, 1);
    };
    $scope.newText = function(idx, item) {
      var modal;
      modal = $modal.open({
        templateUrl: 'public/view/textModal.html',
        resolve: {
          item: function() {
            return item;
          }
        },
        controller: function($scope, $modalInstance, item) {
          if (item == null) {
            item = {
              name: "new text",
              text: "new text",
              font: {
                color: '',
                bgColor: '',
                size: 12,
                style: ''
              },
              x: 0,
              y: 0,
              animates: [],
              type: 'text'
            };
          }
          $scope.item = angular.copy(item);
          $scope.ok = function() {
            return $modalInstance.close($scope.item);
          };
          return $scope.cancel = function() {
            return $modalInstance.dismiss('');
          };
        }
      });
      return modal.result.then(function(rst) {
        if (item) {
          return $scope.curPage.items[idx] = angular.copy(rst);
        } else {
          return $scope.curPage.items.push(rst);
        }
      });
    };
    $scope.newImage = function() {
      return $scope.curPage.items.push({
        name: "item-" + $scope.curPage.items.length,
        text: "item-" + $scope.curPage.items.length + " image",
        x: 0,
        y: 0,
        type: 'image'
      });
    };
    $scope.newVideo = function() {
      return $scope.curPage.items.push({
        name: "item-" + $scope.curPage.items.length,
        text: "item-" + $scope.curPage.items.length + " video",
        x: 0,
        y: 0,
        type: 'video'
      });
    };
    $scope.newLink = function() {
      return $scope.curPage.items.push({
        name: "item-" + $scope.curPage.items.length,
        text: "item-" + $scope.curPage.items.length + " link",
        x: 0,
        y: 0,
        type: 'link'
      });
    };
    $scope.delItem = function(idx) {
      return $scope.curPage.items.splice(idx, 1);
    };
    $scope.savePage = function() {
      return $scope.pages[$scope.curIdx] = angular.copy($scope.curPage);
    };
    return $scope.saveList = function() {
      return $window.sessionStorage.pages = angular.toJson($scope.pages);
    };
  });

  angular.bootstrap(document, ['app']);

}).call(this);
